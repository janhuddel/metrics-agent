name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: make test

  build:
    name: Build Release
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            binary_name: metrics-agent-linux-amd64
          - goos: linux
            goarch: arm64
            binary_name: metrics-agent-linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper version detection

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.version.outputs.version }}
          COMMIT: ${{ github.sha }}
          DATE: ${{ github.event.head_commit.timestamp }}
        run: |
          mkdir -p .build
          go build -ldflags "-s -w -X main.version=$VERSION -X main.commit=${COMMIT:0:7} -X main.date=$DATE" \
            -o .build/${{ matrix.binary_name }} \
            github.com/janhuddel/metrics-agent/cmd/metrics-agent
          chmod +x .build/${{ matrix.binary_name }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: .build/${{ matrix.binary_name }}
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create checksums
        run: |
          cd artifacts
          for file in */metrics-agent-*; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          
      - name: Flatten artifacts
        run: |
          mkdir -p ./release-files
          find artifacts -name "metrics-agent-*" -type f -exec cp -p {} ./release-files/ \;
          find artifacts -name "metrics-agent-*.sha256" -type f -exec cp -p {} ./release-files/ \;
          # Ensure all binaries are executable
          chmod +x ./release-files/metrics-agent-*
          
      - name: Create platform-specific archives
        run: |
          # Create separate tar.gz archives for each platform
          for binary in ./release-files/metrics-agent-linux-*; do
            if [ -f "$binary" ] && [[ ! "$binary" == *.sha256 ]]; then
              platform=$(basename "$binary")
              # Extract just the platform part (e.g., "linux-amd64" from "metrics-agent-linux-amd64")
              platform_suffix=${platform#metrics-agent-}
              checksum_file="${platform}.sha256"
              
              # Check if checksum file exists
              if [ -f "./release-files/$checksum_file" ]; then
                # Create archive with binary and its checksum
                tar -czf "metrics-agent-${{ steps.version.outputs.version }}-${platform_suffix}.tar.gz" \
                  -C ./release-files \
                  "$platform" \
                  "$checksum_file"
              else
                # Create archive with just the binary
                tar -czf "metrics-agent-${{ steps.version.outputs.version }}-${platform_suffix}.tar.gz" \
                  -C ./release-files \
                  "$platform"
              fi
              
              # Create checksum for the archive
              sha256sum "metrics-agent-${{ steps.version.outputs.version }}-${platform_suffix}.tar.gz" > \
                "metrics-agent-${{ steps.version.outputs.version }}-${platform_suffix}.tar.gz.sha256"
            fi
          done

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag for changelog
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=20)
          fi
          
          cat > release_notes.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Downloads
          
          Download the appropriate archive for your platform:
          
          - **Linux AMD64**: \`metrics-agent-${{ steps.version.outputs.version }}-linux-amd64.tar.gz\`
          - **Linux ARM64**: \`metrics-agent-${{ steps.version.outputs.version }}-linux-arm64.tar.gz\`
          
          ## Installation
          
          \`\`\`bash
          # For Linux AMD64
          wget https://github.com/janhuddel/metrics-agent/releases/download/${{ steps.version.outputs.version }}/metrics-agent-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          tar -xzf metrics-agent-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          ./metrics-agent-linux-amd64 --help
          
          # For Linux ARM64
          wget https://github.com/janhuddel/metrics-agent/releases/download/${{ steps.version.outputs.version }}/metrics-agent-${{ steps.version.outputs.version }}-linux-arm64.tar.gz
          tar -xzf metrics-agent-${{ steps.version.outputs.version }}-linux-arm64.tar.gz
          ./metrics-agent-linux-arm64 --help
          \`\`\`
          
          ## Verification
          
          Verify your download:
          
          \`\`\`bash
          # For Linux AMD64
          sha256sum -c metrics-agent-${{ steps.version.outputs.version }}-linux-amd64.tar.gz.sha256
          
          # For Linux ARM64
          sha256sum -c metrics-agent-${{ steps.version.outputs.version }}-linux-arm64.tar.gz.sha256
          \`\`\`
          EOF
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            metrics-agent-${{ steps.version.outputs.version }}-*.tar.gz
            metrics-agent-${{ steps.version.outputs.version }}-*.tar.gz.sha256
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
